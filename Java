import java.util.*;

// Student class
class Student {
    private int studentId;
    private String name;
    private List<Course> coursesEnrolled;

    public Student(int studentId, String name) {
        this.studentId = studentId;
        this.name = name;
        this.coursesEnrolled = new ArrayList<>();
    }

    // Getters and setters
    public int getStudentId() {
        return studentId;
    }

    public String getName() {
        return name;
    }

    public List<Course> getCoursesEnrolled() {
        return coursesEnrolled;
    }

    public void enrollCourse(Course course) {
        coursesEnrolled.add(course);
    }
}

// Course class
class Course {
    private String courseCode;
    private String courseName;
    private int maxAttendance;

    public Course(String courseCode, String courseName, int maxAttendance) {
        this.courseCode = courseCode;
        this.courseName = courseName;
        this.maxAttendance = maxAttendance;
    }

    // Getters
    public String getCourseCode() {
        return courseCode;
    }

    public String getCourseName() {
        return courseName;
    }

    public int getMaxAttendance() {
        return maxAttendance;
    }
}

// Attendance class
class Attendance {
    private Student student;
    private Course course;
    private Date date;
    private String status;

    public Attendance(Student student, Course course, Date date, String status) {
        this.student = student;
        this.course = course;
        this.date = date;
        this.status = status;
    }

    // Getters
    public Student getStudent() {
        return student;
    }

    public Course getCourse() {
        return course;
    }

    public Date getDate() {
        return date;
    }

    public String getStatus() {
        return status;
    }
}

// Attendance manager class
class AttendanceManager {
    private List<Student> students;
    private List<Course> courses;
    private List<Attendance> attendanceRecords;

    public AttendanceManager() {
        this.students = new ArrayList<>();
        this.courses = new ArrayList<>();
        this.attendanceRecords = new ArrayList<>();
    }

    // Method to add a new student
    public void addStudent(Student student) {
        students.add(student);
    }

    // Method to add a new course
    public void addCourse(Course course) {
        courses.add(course);
    }

    // Method to take attendance
    public void takeAttendance(Student student, Course course, Date date, String status) {
        Attendance attendance = new Attendance(student, course, date, status);
        attendanceRecords.add(attendance);
    }

    // Method to generate attendance report for a course
    public void generateAttendanceReport(Course course) {
        System.out.println("Attendance Report for Course: " + course.getCourseName());
        for (Attendance attendance : attendanceRecords) {
            if (attendance.getCourse().equals(course)) {
                System.out.println("Student: " + attendance.getStudent().getName() +
                                   ", Date: " + attendance.getDate() +
                                   ", Status: " + attendance.getStatus());
            }
        }
    }
}

// Main class for testing
public class UniversityAttendanceSystem {
    public static void main(String[] args) {
        // Create an instance of AttendanceManager
        AttendanceManager manager = new AttendanceManager();

        // Create some students
        Student student1 = new Student(1, "Alice");
        Student student2 = new Student(2, "Bob");

        // Create some courses
        Course course1 = new Course("CSCI101", "Introduction to Computer Science", 20);
        Course course2 = new Course("MATH201", "Linear Algebra", 15);

        // Add students and courses to the manager
        manager.addStudent(student1);
        manager.addStudent(student2);
        manager.addCourse(course1);
        manager.addCourse(course2);

        // Simulate taking attendance
        Date currentDate = new Date();
        manager.takeAttendance(student1, course1, currentDate, "Present");
        manager.takeAttendance(student2, course1, currentDate, "Absent");

        // Generate and print attendance report for course1
        manager.generateAttendanceReport(course1);
    }
}
